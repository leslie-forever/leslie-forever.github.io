{"meta":{"title":"Leslie-forever' blog","subtitle":null,"description":null,"author":"Allen","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-05-26T15:45:48.000Z","updated":"2019-05-26T15:47:03.890Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Working on it……"}],"posts":[{"title":"java_reflection","slug":"java-reflection","date":"2019-06-08T13:16:50.000Z","updated":"2019-06-08T14:19:55.574Z","comments":true,"path":"2019/06/08/java-reflection/","link":"","permalink":"http://yoursite.com/2019/06/08/java-reflection/","excerpt":"","text":"#Java反射机制指的是在运行状态下，动态地对任意一个实体类，都能知道这个类的属性和方法；对任意对象都能调用它的任意方法和属性。(也可以看做一种看透class的能力) ##具体使用 获取类的对象三种方式：Class.forName(最常使用)new {类名}().getClass{类名}.classtip: 在获取类对象时，会导致类属性被初始化。（除了使用Class c = {类名}.class这种方式不会导致静态属性初始化） 创建对象Class c =Class.forName(className);//构造器Constructor cons = c.getConstructor();//构造器实例化{classname} c2= (classanme) cons.newInstance(); 通过配置文件获取对象优点：源代码不需要发生任何变化，只需要修改配置文件，就可以导致程序的逻辑发生变化， 这是一种基于配置的编程思想。Spring框架中的控制反转IOC(Inverse of Control)和依赖注入DI(Dependency Injection)的底层就是基于这个原理实现的。1 ) 使用文件读取的方法，先创建File对象，File f = new File(&quot;URL&quot;); FileReader fr = new FileReader(f);2 ) char[] all = new char[(int) f.length()]; fr.read(all);3 ) String className = new String(all);4 )执行步骤二： 123Class c=Class.forName(className);Constructor cons= clazz.getConstructor();&#123;classname&#125; c2= (classanme)cons.newInstance(); 访问属性1 )通过反射机制修改属性（假设创建了一个Hero对象，即Hero h =new Hero()）2 )获取属性字段：Field f1= h.getClass().getDeclaredField(&quot;properties&quot;);3 )修改属性：f1.set(h, &quot;another_property&quot;);tip: getField和getDeclaredField的区别:&#160;&#160;&#160;&#160;&#160;getField 只能获取public的，包括从父类继承来的字段。getDeclaredField 可以获取本类所有的字段，包括private的，但是不能获取继承来的字段。(想访问private属性，还应该setAccessible(true) ) 调用方法1 ) 获取Method，Method m = h.getClass().getMethod(&quot;setName&quot;, String.class);2 )调用，m.invoke(h, &quot;string_name&quot;);","categories":[{"name":"-technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"java相关","slug":"java相关","permalink":"http://yoursite.com/tags/java相关/"}]},{"title":"test_blog","slug":"test-blog","date":"2019-05-26T03:09:16.000Z","updated":"2019-05-26T03:21:09.062Z","comments":true,"path":"2019/05/26/test-blog/","link":"","permalink":"http://yoursite.com/2019/05/26/test-blog/","excerpt":"","text":"#BACK","categories":[],"tags":[{"name":"__test__","slug":"test","permalink":"http://yoursite.com/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-25T16:19:18.414Z","updated":"2019-05-25T16:19:18.414Z","comments":true,"path":"2019/05/26/hello-world/","link":"","permalink":"http://yoursite.com/2019/05/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}